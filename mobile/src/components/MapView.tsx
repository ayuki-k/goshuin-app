import React, { useState, useEffect } from 'react';
import {
  View,
  StyleSheet,
  Alert,
  PermissionsAndroid,
  Platform,
} from 'react-native';
import MapView, { Marker, PROVIDER_GOOGLE } from 'react-native-maps';
import Geolocation from 'react-native-geolocation-service';
import { ShrineTemple } from '../types';

interface MapProps {
  shrineTemples: ShrineTemple[];
  onMarkerPress?: (shrine: ShrineTemple) => void;
  initialRegion?: {
    latitude: number;
    longitude: number;
    latitudeDelta: number;
    longitudeDelta: number;
  };
}

export const GoshuinMapView: React.FC<MapProps> = ({
  shrineTemples,
  onMarkerPress,
  initialRegion,
}) => {
  const [currentLocation, setCurrentLocation] = useState<{
    latitude: number;
    longitude: number;
  } | null>(null);
  // Êù±‰∫¨ÈßÖ„ÅÆÂ∫ßÊ®ô„Çí„Éá„Éï„Ç©„É´„Éà„Å´Ë®≠ÂÆö
  const TOKYO_STATION = {
    latitude: 35.6812, // Êù±‰∫¨ÈßÖ„ÅÆÊ≠£Á¢∫„Å™Â∫ßÊ®ô
    longitude: 139.7671,
    latitudeDelta: 0.5, // Èñ¢Êù±Âú∞ÊñπÂÖ®‰Ωì„ÅåË¶ã„Åà„ÇãÁØÑÂõ≤
    longitudeDelta: 0.5,
  };

  const [region, setRegion] = useState(
    initialRegion || TOKYO_STATION
  );

  const requestLocationPermission = async () => {
    if (Platform.OS === 'android') {
      try {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
          {
            title: '‰ΩçÁΩÆÊÉÖÂ†±„ÅÆË®±ÂèØ',
            message: 'Âæ°Êú±Âç∞„Ç¢„Éó„É™„ÅåÁèæÂú®Âú∞„ÇíË°®Á§∫„Åô„Çã„Åü„ÇÅ„Å´‰ΩçÁΩÆÊÉÖÂ†±„ÅåÂøÖË¶Å„Åß„Åô',
            buttonNeutral: 'Âæå„ÅßÁ¢∫Ë™ç',
            buttonNegative: '„Ç≠„É£„É≥„Çª„É´',
            buttonPositive: 'Ë®±ÂèØ',
          }
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      } catch (err) {
        console.warn(err);
        return false;
      }
    }
    return true;
  };

  const getCurrentLocation = async () => {
    const hasPermission = await requestLocationPermission();
    if (!hasPermission) {
      // Ê®©Èôê„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÊù±‰∫¨ÈßÖ„Çí‰∏≠ÂøÉ„Å´Ë®≠ÂÆö
      setRegion(TOKYO_STATION);
      return;
    }

    Geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords;
        setCurrentLocation({ latitude, longitude });
        setRegion({
          latitude,
          longitude,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        });
      },
      (error) => {

        console.error('Location error:', error);
        // ÁèæÂú®Âú∞ÂèñÂæó„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØÊù±‰∫¨ÈßÖ„Çí‰∏≠ÂøÉ„Å´Ë®≠ÂÆö
        setRegion(TOKYO_STATION);
        Alert.alert(
          '‰ΩçÁΩÆÊÉÖÂ†±',
          'ÁèæÂú®Âú∞„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇÊù±‰∫¨ÈßÖ„Çí‰∏≠ÂøÉ„Å´Ë°®Á§∫„Åó„Åæ„Åô„ÄÇ',
          [{ text: 'OK' }]
        );
      },
      { 
        enableHighAccuracy: true, 
        timeout: 10000, // „Çø„Ç§„É†„Ç¢„Ç¶„Éà„Çí10Áßí„Å´Áü≠Á∏Æ
        maximumAge: 10000 
      }
    );
  };

  useEffect(() => {
    // ÂàùÊúüÂåñÊôÇ„Å´„Åæ„ÅöÊù±‰∫¨ÈßÖ„ÇíË®≠ÂÆö„Åó„ÄÅ„Åù„ÅÆÂæåÁèæÂú®Âú∞ÂèñÂæó„ÇíË©¶Ë°å
    setRegion(TOKYO_STATION);
    
    // Â∞ë„ÅóÈÅÖÂª∂„Åï„Åõ„Å¶ÁèæÂú®Âú∞ÂèñÂæó„ÇíÈñãÂßã
    const timer = setTimeout(() => {
      getCurrentLocation();
    }, 1000);

    return () => clearTimeout(timer);
  }, []);

  const getMarkerColor = (shrineTemple: ShrineTemple): string => {
    return shrineTemple.type === 'shrine' ? '#FF6B6B' : '#4ECDC4';
  };

  const getMarkerTitle = (shrineTemple: ShrineTemple): string => {
    const typeIcon = shrineTemple.type === 'shrine' ? '‚õ©Ô∏è' : 'üèØ';
    return `${typeIcon} ${shrineTemple.name}`;
  };

  return (
    <View style={styles.container}>
      <MapView
        provider={PROVIDER_GOOGLE}
        style={styles.map}
        region={region}
        onRegionChangeComplete={setRegion}
        showsUserLocation={true}
        showsMyLocationButton={true}
        mapType="standard"
      >
        {currentLocation ? (
          <Marker
            coordinate={currentLocation}
            title="ÁèæÂú®Âú∞"
            pinColor="blue"
          />
        ) : (
          <Marker
            coordinate={TOKYO_STATION}
            title="Êù±‰∫¨ÈßÖ"
            description="‰ΩçÁΩÆÊÉÖÂ†±„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑ„Åü„ÇÅ„ÄÅÊù±‰∫¨ÈßÖ„ÇíË°®Á§∫‰∏≠"
            pinColor="orange"
          />
        )}
        
        {shrineTemples
          .filter(shrine => shrine.lat && shrine.lng)
          .map((shrine) => (
            <Marker
              key={shrine.id}
              coordinate={{
                latitude: shrine.lat!,
                longitude: shrine.lng!,
              }}
              title={getMarkerTitle(shrine)}
              description={`${shrine.address || `${shrine.prefecture} ${shrine.city}`}`}
              pinColor={getMarkerColor(shrine)}
              onPress={() => onMarkerPress?.(shrine)}
            />
          ))}
      </MapView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },
});